/**
 * Problem 44 - Pentagon numbers
 *
 * @see {@link https://projecteuler.net/problem=44}
 *
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
 *
 * @author utkarsh-shrivastav77
 */

function getPentagonalNumber(n) {
  return n * (3 * n - 1) / 2;
}

// The function takes a limit parameter that determines the maximum pentagonal number to consider. It first defines a getPentagonalNumber function to calculate the nth pentagonal number using the given formula.

function findMinPentagonalDifference(limit) {

  if (limit < 1) {
    throw new Error('Invalid Input')
  }

  // Then, it initializes two arrays: pentagonalNumbers to store the pentagonal numbers and pentagonalIndices to store their indices. We use a Set for pentagonalIndices to ensure that checking if a number is pentagonal is O(1) on average.

  const pentagonalNumbers = [];
  const pentagonalIndices = new Set();

  // The function then iterates over all pairs of indices in pentagonalNumbers and checks if their sum and difference are also pentagonal. If they are, it checks if the difference D is smaller than the current minimum difference minD. If it is, it updates minD to the new minimum value and minPair to the corresponding pair of pentagonal numbers.

  for (let i = 1; i <= limit; i++) {
    const pentagonalNumber = getPentagonalNumber(i);
    pentagonalNumbers.push(pentagonalNumber);
    pentagonalIndices.add(pentagonalNumber);
  }

  let minD = Infinity;
  let minPair;

  for (let j = 1; j < pentagonalNumbers.length; j++) {
    for (let k = j + 1; k < pentagonalNumbers.length; k++) {
      const sum = pentagonalNumbers[j] + pentagonalNumbers[k];
      const diff = pentagonalNumbers[k] - pentagonalNumbers[j];
      if (pentagonalIndices.has(sum) && pentagonalIndices.has(diff)) {
        if (diff < minD) {
          minD = diff;
          minPair = [pentagonalNumbers[j], pentagonalNumbers[k]];
        }
      }
    }
  }

  return minD;
}

// You can call the function like this to find the minimum difference between a pair of pentagonal numbers whose sum and difference are also pentagonal up to the pentagonal number limit of 10000


export { findMinPentagonalDifference }



